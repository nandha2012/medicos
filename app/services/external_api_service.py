#!/usr/bin/env python
import requests
from dotenv import load_dotenv
import os
from urllib3 import response
from utils.dates import get_current_time_str, get_one_hour_before_str
from fake_responses import generate_fake_detail_record
load_dotenv()
end_point = os.getenv("EXTERNAL_API_END_POINT") or "https://localhost/redcap/api/"
token = os.getenv("EXTERNAL_API_TOKEN") or "E*************7"

details_data = {
        'token': token,
        'content': 'record',
        'action': 'export',
        'format': 'json',
        'type': 'flat',
        'csvDelimiter': '',
        'fields[0]': 'mg_idpreg',
        'fields[1]': 'mg_desc',
        'fields[2]': 'mg_idpreg_sp',
        'fields[3]': 'mg_mra_done',
        'fields[4]': 'mg_ltfu',
        'fields[5]': 'mg_ltfu_why',
        'fields[6]': 'mg_ltfu_why_sp',
        'fields[7]': 'mg_dob',
        'fields[8]': 'mg_desc_race',
        'fields[9]': 'mg_race_aian',
        'fields[10]': 'mg_race_asian',
        'fields[11]': 'mg_race_baa',
        'fields[12]': 'mg_race_mena',
        'fields[13]': 'mg_race_nhopi',
        'fields[14]': 'mg_race_wh',
        'fields[15]': 'mg_race_oth',
        'fields[16]': 'mg_ethn',
        'fields[17]': 'mg_edu',
        'fields[18]': 'mg_zip',
        'fields[19]': 'mg_co',
        'fields[20]': 'mg_tract',
        'fields[21]': 'mg_ht',
        'fields[22]': 'mg_ppwt',
        'fields[23]': 'mg_dewt',
        'fields[24]': 'mg_desc_ppcon',
        'fields[25]': 'mg_ppcon_diabetes',
        'fields[26]': 'mg_cron_htn',
        'fields[27]': 'mg_sub_alc',
        'fields[28]': 'mg_sub_tobacco',
        'fields[29]': 'mg_gravidity',
        'fields[30]': 'mg_parity',
        'fields[31]': 'mg_lmp',
        'fields[32]': 'mg_edd',
        'fields[33]': 'mg_pn',
        'fields[34]': 'mg_pn_dt',
        'fields[35]': 'mg_pn_num',
        'fields[36]': 'mg_desc_pregcon',
        'fields[37]': 'mg_pregcon_diabetes',
        'fields[38]': 'mg_pregcon_eclamphtn',
        'fields[39]': 'mg_pregcon_fgr',
        'fields[40]': 'mg_hosp_yn',
        'fields[41]': 'mg_death',
        'fields[42]': 'mg_death_dt',
        'fields[43]': 'mg_death_dx',
        'fields[44]': 'mg_insur',
        'fields[45]': 'mg_plurality_de',
        'fields[46]': 'mg_decon_icu',
        'fields[47]': 'mg_decon_icuadm_dt',
        'fields[48]': 'mc_desc',
        'fields[49]': 'mc_yn',
        'fields[50]': 'mc_idnndss',
        'fields[51]': 'mc_drugs',
        'fields[52]': 'mc_sub_mj',
        'fields[53]': 'mc_sub_op_rx',
        'fields[54]': 'mc_sub_op_il',
        'fields[55]': 'mc_sub_op_moud',
        'fields[56]': 'mc_sub_meth',
        'fields[57]': 'mc_sub_coc',
        'fields[58]': 'mc_sub_oth',
        'fields[59]': 'mc_sub_oth_sp',
        'fields[60]': 'felony_info',
        'fields[61]': 'jail_status',
        'fields[62]': 'mc_jail',
        'fields[63]': 'mc_homeless',
        'fields[64]': 'mc_dpdx',
        'fields[65]': 'mc_dpdx_dt',
        'fields[66]': 'mc_tx',
        'fields[67]': 'mc_hiv',
        'fields[68]': 'mc_hbv',
        'fields[69]': 'mc_chol',
        'fields[70]': 'mc_chol_dt',
        'fields[71]': 'mc_test_amnio',
        'fields[72]': 'mc_fetalmonitor',
        'fields[73]': 'mc_de_h',
        'fields[74]': 'mc_de_prolong',
        'fields[75]': 'mc_laceration',
        'fields[76]': 'mg_notes',
        'fields[77]': 'pregnant_person_form_complete',
        'fields[78]': 'bg_desc',
        'fields[79]': 'bg_idbaby',
        'fields[80]': 'bg_mra_done',
        'fields[81]': 'bg_ltfu',
        'fields[82]': 'bg_ltfu_why',
        'fields[83]': 'bg_ltfu_why_sp',
        'fields[84]': 'bg_detype',
        'fields[85]': 'bg_outcome',
        'fields[86]': 'bg_outcome_dt',
        'fields[87]': 'bg_birvol',
        'fields[88]': 'bg_ga_w',
        'fields[89]': 'bg_ga_d',
        'fields[90]': 'bg_sex',
        'fields[91]': 'bg_exm_yn',
        'fields[92]': 'bg_desc_exm',
        'fields[93]': 'bg_exm_gen',
        'fields[94]': 'bg_exm_gen_sp',
        'fields[95]': 'bg_exm_heent',
        'fields[96]': 'bg_exm_heent_sp',
        'fields[97]': 'bg_exm_cardio',
        'fields[98]': 'bg_exm_cardio_sp',
        'fields[99]': 'bg_exm_lung',
        'fields[100]': 'bg_exm_lung_sp',
        'fields[101]': 'bg_exm_abd',
        'fields[102]': 'bg_exm_abd_sp',
        'fields[103]': 'bg_exm_gu',
        'fields[104]': 'bg_exm_gu_sp',
        'fields[105]': 'bg_exm_muske',
        'fields[106]': 'bg_exm_muske_sp',
        'fields[107]': 'bg_exm_neuro',
        'fields[108]': 'bg_exm_neuro_sp',
        'fields[109]': 'bg_exm_skin',
        'fields[110]': 'bg_exm_skin_sp',
        'fields[111]': 'bg_exm_sp',
        'fields[112]': 'bg_lt',
        'fields[113]': 'bg_wt',
        'fields[114]': 'bg_hc',
        'fields[115]': 'bg_bstfed',
        'fields[116]': 'bg_dis_dt',
        'fields[117]': 'bg_dischargecare',
        'fields[118]': 'bg_dischargecare_sp',
        'fields[119]': 'bg_cps',
        'fields[120]': 'bg_death',
        'fields[121]': 'bg_death_dt',
        'fields[122]': 'bg_death_dx',
        'fields[123]': 'bg_icu',
        'fields[124]': 'bg_icudis_dt',
        'fields[125]': 'bg_hear_oae',
        'fields[126]': 'bg_hear_abr',
        'fields[127]': 'bg_hear_unk',
        'fields[128]': 'bc_desc',
        'fields[129]': 'bc_idnndss',
        'fields[130]': 'bc_nas',
        'fields[131]': 'bg_notes',
        'fields[132]': 'pregnancy_outcomes_and_birth_form_complete',
        'fields[133]': 'bg_desc_2',
        'fields[134]': 'ig_idbaby',
        'fields[135]': 'ig_mra_done',
        'fields[136]': 'ig_ltfu',
        'fields[137]': 'ig_ltfu_why',
        'fields[138]': 'ig_ltfu_why_sp',
        'fields[139]': 'ig_death',
        'fields[140]': 'ig_death_dt',
        'fields[141]': 'ig_death_dx',
        'fields[142]': 'ig_livingwith',
        'fields[143]': 'ig_livingwith_sp',
        'fields[144]': 'ig_cps',
        'fields[145]': 'ig_visit_dt',
        'fields[146]': 'ig_exm_yn',
        'fields[147]': 'ig_desc_exm',
        'fields[148]': 'ig_exm_gen',
        'fields[149]': 'ig_exm_gen_sp',
        'fields[150]': 'ig_exm_heent',
        'fields[151]': 'ig_exm_heent_sp',
        'fields[152]': 'ig_exm_cardio',
        'fields[153]': 'ig_exm_cardio_sp',
        'fields[154]': 'ig_exm_lung',
        'fields[155]': 'ig_exm_lung_sp',
        'fields[156]': 'ig_exm_abd',
        'fields[157]': 'ig_exm_abd_sp',
        'fields[158]': 'ig_exm_gu',
        'fields[159]': 'ig_exm_gu_sp',
        'fields[160]': 'ig_exm_muske',
        'fields[161]': 'ig_exm_muske_sp',
        'fields[162]': 'ig_exm_neuro',
        'fields[163]': 'ig_exm_neuro_sp',
        'fields[164]': 'ig_exm_skin',
        'fields[165]': 'ig_exm_skin_sp',
        'fields[166]': 'ig_exm_sp',
        'fields[167]': 'ig_lt',
        'fields[168]': 'ig_wt',
        'fields[169]': 'ig_hc',
        'fields[170]': 'ig_bstfed',
        'fields[171]': 'ig_desc_ref',
        'fields[172]': 'ig_ref_ei',
        'fields[173]': 'ig_ref_pt',
        'fields[174]': 'ig_ref_ot',
        'fields[175]': 'ig_ref_slp',
        'fields[176]': 'ig_ref_opth',
        'fields[177]': 'ig_ref_audio',
        'fields[178]': 'ig_ref_dev',
        'fields[179]': 'ig_ref_med',
        'fields[180]': 'ig_ref_oth',
        'fields[181]': 'ig_ref_med_sp',
        'fields[182]': 'ig_ref_oth_sp',
        'fields[183]': 'ig_opth',
        'fields[184]': 'ig_opth_dt',
        'fields[185]': 'ig_opth_res',
        'fields[186]': 'ig_opth_sp',
        'fields[187]': 'ig_audio',
        'fields[188]': 'ig_audio_dt',
        'fields[189]': 'ig_audio_res',
        'fields[190]': 'ig_audio_chl',
        'fields[191]': 'ig_audio_snhl',
        'fields[192]': 'ig_audio_ansd',
        'fields[193]': 'ig_audio_oth',
        'fields[194]': 'ig_audio_oth_sp',
        'fields[195]': 'ic_desc',
        'fields[196]': 'ic_liver',
        'fields[197]': 'ic_liver_dx',
        'fields[198]': 'ic_liver_dt',
        'fields[199]': 'ic_tx',
        'fields[200]': 'ig_notes',
        'fields[201]': 'infant_follow_up_form_complete',
        'fields[202]': 'abs_who_ifu',
        'fields[203]': 'ifu_fac_name',
        'fields[204]': 'ifu_fac_phone',
        'fields[205]': 'ifu_fac_city',
        'fields[206]': 'ifu_fac_num',
        'fields[207]': 'ifu_varify_who',
        'fields[208]': 'ifu_fac_notes',
        'fields[209]': 'request_ifu',
        'fields[210]': 'req_date_ifu',
        'fields[211]': 'req_ifu_days',
        'fields[212]': 'request2_ifu',
        'fields[213]': 'req2_date_ifu',
        'fields[214]': 'req2_ifu_days',
        'fields[215]': 'ifu_record',
        'fields[216]': 'mr_ifu_rec_date',
        'fields[217]': 'request_ifu_2',
        'fields[218]': 'req_date_ifu_2',
        'fields[219]': 'req_ifu_days_2',
        'fields[220]': 'request2_ifu_2',
        'fields[221]': 'req2_date_ifu_2',
        'fields[222]': 'req2_ifu_days_2',
        'fields[223]': 'ifu_record_2',
        'fields[224]': 'mr_ifu_rec_date_2',
        'fields[225]': 'ifu_requester_notes',
        'fields[226]': 'file_upload_v2',
        'fields[227]': 'file_upload_2_v2',
        'fields[228]': 'file_upload_3_v2',
        'fields[229]': 'file_upload_4_v2',
        'fields[230]': 'case_assignment_ifu',
        'fields[231]': 'chart_abs_complete_ifu',
        'fields[232]': 'chart_abs_complete_ifu_2',
        'fields[233]': 'issue_rec_type_ifu',
        'fields[234]': 'char_ab_issue_yn_ifu',
        'fields[235]': 'chart_ab_issue_txt_ifu',
        'fields[236]': 'rd_request_ifu_dt',
        'fields[237]': 'rd_req_days_ifu',
        'fields[238]': 'char_ab_issue_res_ifu',
        'fields[239]': 'char_ab_issue_res_ifu_ab',
        'fields[240]': 'ifu_bg_complete',
        'fields[241]': 'dg_desc',
        'fields[242]': 'dg_idbaby',
        'fields[243]': 'dg_encount_dt',
        'fields[244]': 'dc_diag_timepoint',
        'fields[245]': 'dg_icd_code',
        'fields[246]': 'dg_macdp_code',
        'fields[247]': 'dg_diag_sp',
        'fields[248]': 'diagnosis_code_form_complete',
        'fields[249]': 'tc_desc',
        'fields[250]': 'tc_idbaby',
        'fields[251]': 'tc_level',
        'fields[252]': 'tc_type',
        'fields[253]': 'tc_type_sp',
        'fields[254]': 'tc_st_dt',
        'fields[255]': 'tc_end_dt',
        'fields[256]': 'tc_dose_sp',
        'fields[257]': 'treatment_form_complete',
        'fields[258]': 'lc_prg_desc',
        'fields[259]': 'lc_prg_test',
        'fields[260]': 'lc_prg_dt',
        'fields[261]': 'lc_prg_resinterp',
        'fields[262]': 'lc_prg_quant',
        'fields[263]': 'lc_prg_quant_unit',
        'fields[264]': 'lc_prg_quant_unit_sp',
        'fields[265]': 'lc_prg_quant_ll',
        'fields[266]': 'lc_prg_naat_geno',
        'fields[267]': 'lc_prg_snomed',
        'fields[268]': 'lc_prg_loinc',
        'fields[269]': 'p_lab_rpt_local_id',
        'fields[270]': 'lc_prg_notes',
        'fields[271]': 'pregnant_person_laboratory_form_complete',
        'fields[272]': 'lc_inf_desc',
        'fields[273]': 'lc_inf_idbaby',
        'fields[274]': 'lc_inf_test',
        'fields[275]': 'lc_inf_dt',
        'fields[276]': 'lc_inf_resinterp',
        'fields[277]': 'lc_inf_quant',
        'fields[278]': 'lc_inf_quant_unit',
        'fields[279]': 'lc_inf_quant_unit_sp',
        'fields[280]': 'lc_inf_quant_ll',
        'fields[281]': 'lc_inf_quant_ul',
        'fields[282]': 'lc_inf_snomed',
        'fields[283]': 'lc_inf_loinc',
        'fields[284]': 'i_lab_rpt_local_id',
        'fields[285]': 'lc_inf_notes',
        'fields[286]': 'infant_laboratory_form_complete',
        'fields[287]': 'dr_idbaby',
        'fields[288]': 'hos_name',
        'fields[289]': 'hos_name_cat',
        'fields[290]': 'bc_birthplacename',
        'fields[291]': 'hospital_address',
        'fields[292]': 'bc_birthplace_city_state',
        'fields[293]': 'bc_dattendant',
        'fields[294]': 'hospital_phone_num',
        'fields[295]': 'hospital_fax_num',
        'fields[296]': 'hospital_mr',
        'fields[297]': 'hospital_mr_vr',
        'fields[298]': 'phys_name',
        'fields[299]': 'physician_phone_num',
        'fields[300]': 'physician_fax_num',
        'fields[301]': 'physician_address',
        'fields[302]': 'ped_notes',
        'fields[303]': 'hospital_and_pediatrician_information_complete',
        'fields[304]': 'year_cert_no',
        'fields[305]': 'mom_nbs_id',
        'fields[306]': 'con_inv_local_id',
        'fields[307]': 'bc_momnamefirst',
        'fields[308]': 'bc_momnamemiddle',
        'fields[309]': 'bc_momnamelast',
        'fields[310]': 'bc_momnamemaidenlast',
        'fields[311]': 'bc_mom_dob',
        'fields[312]': 'bc_momssn',
        'fields[313]': 'inf_dob_mom_tr',
        'fields[314]': 'mom_death_ind',
        'fields[315]': 'mom_dod_cert_num',
        'fields[316]': 'mom_ddod',
        'fields[317]': 'mom_dcause',
        'fields[318]': 'con_inv_case_status',
        'fields[319]': 'mom_demo_notes',
        'fields[320]': 'pregnant_person_information_complete',
        'fields[321]': 'id_idbaby',
        'fields[322]': 'inf_dem_bc_number',
        'fields[323]': 'infant_nbs_id',
        'fields[324]': 'pinv_inv_local_id',
        'fields[325]': 'bc_childnamefirst',
        'fields[326]': 'bc_childnamemiddle',
        'fields[327]': 'bc_childnamelast',
        'fields[328]': 'dob_inf',
        'fields[329]': 'bc_sex',
        'fields[330]': 'bc_childssn',
        'fields[331]': 'inf_death_ind',
        'fields[332]': 'dcertnum',
        'fields[333]': 'ddod',
        'fields[334]': 'dcause',
        'fields[335]': 'pinv_inv_case_status',
        'fields[336]': 'inf_demo_notes',
        'fields[337]': 'infant_information_complete',
        'fields[338]': 'hos_name_cat_2',
        'fields[339]': 'year_of_birth',
        'fields[340]': 'mr_emr',
        'fields[341]': 'emr_used',
        'fields[342]': 'emr_notes',
        'fields[343]': 'mr_emg_all',
        'fields[344]': 'mr_emr_needs',
        'fields[345]': 'mr_emr_needs_oth',
        'fields[346]': 'mr_emr_needs_inf',
        'fields[347]': 'mr_emr_needs_oth_inf',
        'fields[348]': 'mr_request',
        'fields[349]': 'mr_request_dt',
        'fields[350]': 'mr_request_days',
        'fields[351]': 'mr_received',
        'fields[352]': 'record_rec_via',
        'fields[353]': 'mr_rec_all',
        'fields[354]': 'mr_rec_needs',
        'fields[355]': 'mr_needs_oth',
        'fields[356]': 'mr_rec_needs_inf',
        'fields[357]': 'mr_needs_oth_inf',
        'fields[358]': 'attestation',
        'fields[359]': 'mr_request_2',
        'fields[360]': 'mr_request_dt_2',
        'fields[361]': 'mr_request_days_2',
        'fields[362]': 'mr_received_2',
        'fields[363]': 'record_rec_via_2',
        'fields[364]': 'mr_rec_all_2',
        'fields[365]': 'mr_rec_needs_2',
        'fields[366]': 'mr_needs_oth_2',
        'fields[367]': 'mr_rec_needs_inf_2',
        'fields[368]': 'mr_needs_oth_inf_2',
        'fields[369]': 'ltfu',
        'fields[370]': 'mra_pass',
        'fields[371]': 'mr_upload',
        'fields[372]': 'mr_upload_2',
        'fields[373]': 'mr_upload_3',
        'fields[374]': 'mr_upload_4',
        'fields[375]': 'mr_upload_5',
        'fields[376]': 'medical_records_request_for_pregnancy_and_birth_complete',
        'rawOrLabel': 'raw',
        'rawOrLabelHeaders': 'raw',
        'exportCheckboxLabel': 'false',
        'exportSurveyFields': 'false',
        'exportDataAccessGroups': 'false',
        'returnFormat': 'json',
        'dateRangeBegin': '',
        'dateRangeEnd': ''
}

def get_log_data_from_api():
    data = {
        'token': token,
        'content': 'log',
        'logtype': 'record',
        'user': '',
        'record': '',
        'beginTime': '2025-06-19 01:00',
        'endTime': get_current_time_str(),
        'format': 'json',
        'returnFormat': 'json'
    }
    try:
        response = requests.post(end_point,data=data)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"❌ Error getting log data from API: {e}")
        return None

def get_log_detail_data_from_api(records, batch_size=5):
    details = []
     # Process records in batches
    for i in range(0, len(records), batch_size):
        batch = records[i:i + batch_size]
        print(f"📦 Processing batch {i//batch_size + 1}: records {i+1}-{min(i+batch_size, len(records))}")
        data = get_batch_record_data_from_api(batch)
        # data = generate_fake_detail_record(batch,1)
        print(f'{len(data)} found for {batch}')
        if data is None:
            print(f"❌ Error getting single record data from API")
            continue
        for item in data:
            details.append(item)
    return details


def get_batch_record_data_from_api(records):
    data = details_data.copy()
    for j, record in enumerate(records):
        data[f'records[{j}]'] = record.record
    try:
        response = requests.post(end_point,data=data)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"❌ Error getting log detail data from API: {e}")
        return None
    